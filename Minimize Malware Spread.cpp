class Solution {
public:
    vector<int>parent;
    vector<int>area;
    int find(int x)
    {
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find(parent[x]);
    }
  
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& init) 
    {    
        int n=graph.size();
        parent.resize(n+1);
        area=vector<int>(n+1,1);
        iota(parent.begin(),parent.end(),0);
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(graph[i][j])
                {
                    int p1=find(i);
                    int p2=find(j);
                    if(p1!=p2)
                    {
                        parent[p1]=p2;
                    }
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            area[find(i)]++;
        }
        sort(init.begin(),init.end());
        vector<int>node(n);
        for(int i=0;i<init.size();i++)
        {
            node[find(init[i])]++;
        }
        int ans=init[0];
        int max_size=0;
        for(int i=0;i<init.size();i++)
        {
            if(node[find(init[i])]==1&&area[find(init[i])]>max_size)
            {
                ans=init[i];
                max_size=area[find(init[i])];
            }
        }
       
        return ans;
    }
};
